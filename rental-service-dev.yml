spring:
  application:
    name: rental-service
  security:
        oauth2:
            resourceserver:
                jwt:
                    jwk-set-uri: http://localhost:8080/realms/RentACarMicroservice/protocol/openid-connect/certs
  datasource:
    url: jdbc:postgresql://localhost:5432/rentaldb
    username: postgres
    password: 123456
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
  kafka:
    producer:
      bootstrap-servers: http://localhost:9092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
  cloud:
    openfeign:
      circuitbreaker:
        enabled: true
eureka:
  client:
    fetch-registry: true
    register-with-eureka: true
    service-url:
      defaultZone: http://localhost:8761/eureka
  instance:
    instance-id: ${spring.application.name}:${random.value}
    prefer-ip-address: true

resilience4j:
  retry:
    instances:
      isCarAvailable:
        max-attempts: 6
        waitDuration: 2s
      paymentStatus:
        max-attempts: 6
        waitDuration: 2s

server:
  port: 0
management:
    endpoints:
        web:
            exposure:
                include: "*"
    tracing:
        sampling:
            probability: 1.0
    zipkin:
        tracing:
            endpoint: http://localhost:9411/api/v2/spans